// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Following command gives sql to replicate the db
// sqlite3 prisma/data.db .dump > data.sql
// npx prisma db seed; Runs the seed script on db
// npx prisma migrate deploy ; creates a single migration file
// npx prisma migrate dev ;  run this before deploy command
// npx prisma migrate reset ;  run this to reset db & re-apply all migrations and run seed script.
// Widen then narrow approach:
// Widen app to consume A or B
// Widen db to provide A and B and the app to write to both A and B
// Narrow app to consume B and only write to B. Narrow db to provide B
// https://www.notion.so/03-Data-Migrations-Data-Modeling-Deep-Dive-a7b8f261357840cb8c9177e2b1397961

// index takes more space and it takes more time to add records
// but they make mutations faster sometimes. Most of the times, the read speed is more important than write speed
// Things to consider indexing
// 1. Primary keys: Done by default
// 2. Unique keys: handled by Prisma
// 3. Non unique foreign keys: Opportunity for indexing (should be done by default manually as per KCD)
// Things to consider for indexing
// "WHERE" clause stuff
// "ORDERBY" clause stuff
// Identify indexing opportinities
// sqlite3 ./prisma/data.db
// Use sql query: EXPLAIN QUERY PLAN SELECT * FROM user WHERE name = 'Alice';
// Look for scan and search without an index
// Creating index manually using sql
// CREATE UNIQUE INDEX "User_email_key" ON "User"("email");
// Creating index manually using Prisma
// @@index[fieldname1, fieldname2 ...]  // normally at the most 2 keys are used for indexing
// "npx prisms db reset" : clear the db, run all the migrations and then run seed script.
// Use npx tsx ./prisma/seed.ts to seed the db
// To view all indexes on a db use following command:
// SELECT name from sqlite_master where type="index"; 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// "npx prisma-docs-generator serve" to view docs
generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  notes       Note[]
  // password can't enforced to be required at 
  // db level and this actually is helpful
  password    Password?
  roles       Role[]
  sessions    Session[]
  connections Connection[]
}

model Note {
  id        String      @id @default(cuid())
  title     String
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  // Here, one to many relationship (owner) is defined and known by the 
  // Note and not User, User is not aware of this relationship
  owner     User        @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId   String // Absense of "@unique" makes the relationship one to many 
  images    NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search page a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes // The image will be stored in the database as a blob
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId      String // Absense of "@unique" makes the relationship one to many 

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes // The image will be stored in the database as a blob
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @unique // "@unique" makes the relationship one to one 
}

// add a Password model here. It should only have the hash which is a string
// and a userId field which is a string and is unique. It should also have a
// user field to establish the relationship.
model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Permission {
  // id (as usual)
  id String @id @default(cuid())

  // action - a required string (will be one of create, read, update, delete)
  action String // e.g. create, read, update, delete

  // entity - a required string (will be one of user or note)
  entity String // e.g. note, user, etc.

  // access - a required string (will be one of own or any)
  access String // e.g. own or any

  // description - a required string (can default to "")
  description String @default("")

  // createdAt (as usual)
  createdAt DateTime @default(now())

  // updatedAt (as usual)
  updatedAt DateTime @updatedAt

  // roles - an array of Roles
  roles Role[]

  // @@unique constraint of action, entity, and access
  // ðŸ“œ https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#unique-1
  @@unique([action, entity, access])
}

model Role {
  // id (as usual)
  id String @id @default(cuid())

  // name - a required string
  name String @unique

  // description - a required string (can default to "")
  description String @default("")

  // createdAt (as usual)
  createdAt DateTime @default(now())

  // updatedAt (as usual)
  updatedAt DateTime @updatedAt

  // Many to many relation doesn't have foreign key
  // users - an array of Users
  users User[]

  // permissions - an array of Permissions
  permissions Permission[]
}

// model for the user's sessions
model Session {
  // id - like usual
  id String @id @default(cuid())

  // expirationDate - a required DateTime
  expirationDate DateTime

  // createdAt - like usual
  createdAt DateTime @default(now())

  // updatedAt - like usual
  updatedAt DateTime @updatedAt

  // user - a required relation to the User model with onDelete and onUpdate set to Cascade
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // userId - a required string (but not unique, because there can be many of these per user)
  userId String

  // As the userId is a foreign key but it's not unique, add an index for that too.
  // non-unique foreign key
  @@index([userId])
}

model Verification {
  // - id: string and a primary key
  id String @id @default(cuid())

  // createdAt: DateTime and a default value of now
  createdAt DateTime @default(now())

  // type of verification, e.g. "email" or "phone"
  type String

  // thing we're trying to verify, e.g. a user's email or phone number
  target String

  // secret key used to generate the otp
  secret String

  // algorithm used to generate the otp
  algorithm String

  // number of digits in the otp
  digits Int

  // number of seconds the otp is valid for
  period Int

  // valid characters for the otp
  charSet String

  // When it's safe to delete this verification
  expiresAt DateTime?

  // unique constraint on target and type
  // There should be only one of each type for a given target
  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user - relationship to the user (many-to-one) like the others
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // userId - string (non-unique foreign key, so you'll want an index for it)
  userId String

  // only one connection can exist for a given account on a provider
  @@unique([providerName, providerId])
  // non-unique foreign key
  @@index([userId])
}
